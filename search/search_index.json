{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"M60 Mechanical Keyboard \u00b6 En | \u4e2d\u6587 M60 is a hot-swappable 60% Keyboard with USB, BLE 5.0 and RGB backlight. It is highly configurable and extensible. It can run Python code saved in its USB storage, which makes it super powerful. It has very low power consumption and only needs about 160uA current when connected to a computer via Bluetooth. It is one of the lowest latency USB keyboards. Features \u00b6 BLE 5.0 Multi-pairing up to 10 devices Hot-swappable USB Type-C Standard 60% layout (61 keys) 6KRO RGB backlit Supports Windows/macOS/Linux/iOS/Android Low power consumption All keys remappable Up to 32 layers Macros Pair-keys Specs \u00b6 M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm","title":"Introduction"},{"location":"#m60-mechanical-keyboard","text":"En | \u4e2d\u6587 M60 is a hot-swappable 60% Keyboard with USB, BLE 5.0 and RGB backlight. It is highly configurable and extensible. It can run Python code saved in its USB storage, which makes it super powerful. It has very low power consumption and only needs about 160uA current when connected to a computer via Bluetooth. It is one of the lowest latency USB keyboards.","title":"M60 Mechanical Keyboard"},{"location":"#features","text":"BLE 5.0 Multi-pairing up to 10 devices Hot-swappable USB Type-C Standard 60% layout (61 keys) 6KRO RGB backlit Supports Windows/macOS/Linux/iOS/Android Low power consumption All keys remappable Up to 32 layers Macros Pair-keys","title":"Features"},{"location":"#specs","text":"M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm","title":"Specs"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Interested in contributing to python-keyboard ? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on makerdiary/community . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Requesting a tutorial \u00b6 If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutoial","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Interested in contributing to python-keyboard ? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on makerdiary/community .","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#requesting-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutoial","title":"Requesting a tutorial"},{"location":"assembling/","text":"Assembling \u00b6 Make sure the M60 keyboard is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below:","title":"Assembling"},{"location":"assembling/#assembling","text":"Make sure the M60 keyboard is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below:","title":"Assembling"},{"location":"backlight/","text":"Backlight \u00b6 The keboard has 64 programmable RGB LEDs. We are still working on the backlight. Before we get it done, you are able to customize the backlight in the macro_handler . For example, we set 9 to red color when a macro key pressed, and turn into green color when the macro key is released: def macro_handler ( dev , n , is_down ): if is_down : dev . backlight . pixel ( 9 , 0xff , 0 , 0 ) else : dev . backlight . pixel ( 9 , 0 , 0xff , 0 ) dev . backlight . update () dev.backlight provides some basic fucntions to control the RGB LEDs Backlight APIs \u00b6 update() synchronizes with its buffer. pixel(i, r, g, b) sets the bufffer of the LED i set_brightness(value) sets the global brightness of all LEDs (from 0 to 255) Index of RGB LED \u00b6 You can find the index of an LED here. # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) No.61 and No.62 are under the space key. No.63 is at the back of keyboard.","title":"Backlight"},{"location":"backlight/#backlight","text":"The keboard has 64 programmable RGB LEDs. We are still working on the backlight. Before we get it done, you are able to customize the backlight in the macro_handler . For example, we set 9 to red color when a macro key pressed, and turn into green color when the macro key is released: def macro_handler ( dev , n , is_down ): if is_down : dev . backlight . pixel ( 9 , 0xff , 0 , 0 ) else : dev . backlight . pixel ( 9 , 0 , 0xff , 0 ) dev . backlight . update () dev.backlight provides some basic fucntions to control the RGB LEDs","title":"Backlight"},{"location":"backlight/#backlight-apis","text":"update() synchronizes with its buffer. pixel(i, r, g, b) sets the bufffer of the LED i set_brightness(value) sets the global brightness of all LEDs (from 0 to 255)","title":"Backlight APIs"},{"location":"backlight/#index-of-rgb-led","text":"You can find the index of an LED here. # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) No.61 and No.62 are under the space key. No.63 is at the back of keyboard.","title":"Index of RGB LED"},{"location":"configuration/","text":"Keyboard Configuration \u00b6 M60 is not just a USB HID device, but also a USB storage device. Python code can be saved and executed in the keyboard. When the keyboard powers on, it will run the Python file code.py in its USB storage. In code.py , we can modify its keymap, add a macro and add a new feature to keyboard. The default content of code.py is: from PYKB import * keyboard = Keyboard () ___ = TRANSPARENT BOOT = BOOTLOADER L1 = LAYER_TAP ( 1 ) L2D = LAYER_TAP ( 2 , D ) L3B = LAYER_TAP ( 3 , B ) LSFT4 = LAYER_MODS ( 4 , MODS ( LSHIFT )) RSFT4 = LAYER_MODS ( 4 , MODS ( RSHIFT )) # Semicolon & Ctrl SCC = MODS_TAP ( MODS ( RCTRL ), ';' ) keyboard . keymap = ( # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 2 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGUP , ___ , ___ , ___ , AUDIO_VOL_DOWN , AUDIO_VOL_UP , AUDIO_MUTE , ___ , ___ , ___ , ___ , ___ , ___ , LEFT , DOWN , UP , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGDN , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 3 ( BT_TOGGLE , BT1 , BT2 , BT3 , BT4 , BT5 , BT6 , BT7 , BT8 , BT9 , BT0 , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , USB_TOGGLE , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 4 ( '`' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , D , ___ , ___ , ___ , ___ , ___ , ___ , ';' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , B , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . pairs_handler = pairs_handler # Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] keyboard . verbose = False keyboard . run () keymap contains multiple layers of keycodes. macro_handler is used to handle all macros. pairs_handler is used to handle any pair-keys. When code.py is saved, the keyboard will reload it. If code.py has a syntax error, the keyboard will stop working. But, don't worry, it wouldn't damage the hardware. Fix the error and save it, then the keyboard will recover If you know how Python works, configuring the keyboard would be very easy. If not, we have some examples to get started. To swap the positions of Caps and LCtrl , just swap CAPS and LCTRL in layer 0 of keymap : # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LCTRL , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , CAPS , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Instead of D , use Caps as a Tap-key to activate navigation functions. Only need to change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LAYER_TAP ( 2 , CAPS ), A , S , D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Add a new macro. Use Fn and Enter to trigger No.1 macro. Just add MACRO(1) to layer 1 : # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , MACRO ( 1 ), ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), To define the function of the macro, please follow the macro guide Use RShift , RGUI , Fn and RCtrl as Tap-keys. Tapping them outputs arrows keys (press & release quickly). Just change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , MODS_TAP ( MODS ( RSHIFT ), UP ), LCTRL , LGUI , LALT , SPACE , RALT , MODS_TAP ( MODS ( RGUI ), LEFT ), LAYER_TAP ( 1 , DOWN ), MODS_TAP ( MODS ( RCTRL ), RIGHT ) ),","title":"Configuration"},{"location":"configuration/#keyboard-configuration","text":"M60 is not just a USB HID device, but also a USB storage device. Python code can be saved and executed in the keyboard. When the keyboard powers on, it will run the Python file code.py in its USB storage. In code.py , we can modify its keymap, add a macro and add a new feature to keyboard. The default content of code.py is: from PYKB import * keyboard = Keyboard () ___ = TRANSPARENT BOOT = BOOTLOADER L1 = LAYER_TAP ( 1 ) L2D = LAYER_TAP ( 2 , D ) L3B = LAYER_TAP ( 3 , B ) LSFT4 = LAYER_MODS ( 4 , MODS ( LSHIFT )) RSFT4 = LAYER_MODS ( 4 , MODS ( RSHIFT )) # Semicolon & Ctrl SCC = MODS_TAP ( MODS ( RCTRL ), ';' ) keyboard . keymap = ( # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 2 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGUP , ___ , ___ , ___ , AUDIO_VOL_DOWN , AUDIO_VOL_UP , AUDIO_MUTE , ___ , ___ , ___ , ___ , ___ , ___ , LEFT , DOWN , UP , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGDN , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 3 ( BT_TOGGLE , BT1 , BT2 , BT3 , BT4 , BT5 , BT6 , BT7 , BT8 , BT9 , BT0 , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , USB_TOGGLE , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 4 ( '`' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , D , ___ , ___ , ___ , ___ , ___ , ___ , ';' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , B , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . pairs_handler = pairs_handler # Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] keyboard . verbose = False keyboard . run () keymap contains multiple layers of keycodes. macro_handler is used to handle all macros. pairs_handler is used to handle any pair-keys. When code.py is saved, the keyboard will reload it. If code.py has a syntax error, the keyboard will stop working. But, don't worry, it wouldn't damage the hardware. Fix the error and save it, then the keyboard will recover If you know how Python works, configuring the keyboard would be very easy. If not, we have some examples to get started. To swap the positions of Caps and LCtrl , just swap CAPS and LCTRL in layer 0 of keymap : # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LCTRL , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , CAPS , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Instead of D , use Caps as a Tap-key to activate navigation functions. Only need to change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LAYER_TAP ( 2 , CAPS ), A , S , D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Add a new macro. Use Fn and Enter to trigger No.1 macro. Just add MACRO(1) to layer 1 : # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , MACRO ( 1 ), ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), To define the function of the macro, please follow the macro guide Use RShift , RGUI , Fn and RCtrl as Tap-keys. Tapping them outputs arrows keys (press & release quickly). Just change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , MODS_TAP ( MODS ( RSHIFT ), UP ), LCTRL , LGUI , LALT , SPACE , RALT , MODS_TAP ( MODS ( RGUI ), LEFT ), LAYER_TAP ( 1 , DOWN ), MODS_TAP ( MODS ( RCTRL ), RIGHT ) ),","title":"Keyboard Configuration"},{"location":"factory_reset/","text":"Factory Reset \u00b6 If you get a fatal error when you modify the code of keyboard, you can always do a factory reset: Download factory_reset.uf2 , follow the firmware upgrade guide to flash factoary_reset.uf2 . factory_reset.uf2 will erase the storage of the keyboard. Flash the latest firmware from python-keyboard / firmware .","title":"Factory Reset"},{"location":"factory_reset/#factory-reset","text":"If you get a fatal error when you modify the code of keyboard, you can always do a factory reset: Download factory_reset.uf2 , follow the firmware upgrade guide to flash factoary_reset.uf2 . factory_reset.uf2 will erase the storage of the keyboard. Flash the latest firmware from python-keyboard / firmware .","title":"Factory Reset"},{"location":"getting-started/","text":"Get started with M60 Keyboard \u00b6 M60 is a compact keyboard. It has a keymap composed of multiple layers, which is similar to TMK Keyboard . By default, No.0 layer is used: Keymap \u00b6 As the 60% keyboard lacks a lot of keys such as F1~F12 and arrow keys, Fn is used to activate a new layer. When holding Fn down, the following keys are activated. Fn + M triggers No.0 macro Fn + P suspends the keyboard when only powered by battery. Fn + B enters its bootloader (only for upgrade) Except Fn , a normal key can be used as a Tap-key, which is holding a key down to activate an alternate function. Using B to configure Bluetooth and USB \u00b6 B is used as a Tap-key to configure Bluetooth and USB. Taping B outputs b (press & release quickly). Holding B down activates another new layer. With the layer, the following functions are available: B + Esc toggles Bluetooth B + 0 ~ 9 changes Bluetooth ID to switch between multiple computers and phones B + U toggles USB Using D for Navigation \u00b6 D is also used as a Tap key for navigation functions. D + H \u2192 \u2190 D + J \u2192 \u2193 D + K \u2192 \u2191 D + L \u2192 \u2192 D + U \u2192 PgUp D + N \u2192 PgDn Using ; as Ctrl \u00b6 ; is another type of Tap-key. Taping ; outputs ; . However, holding ; down outputs Ctrl instead of activating a layer. ; + c = Ctrl + c ; + v = Ctrl + v ; + x = Ctrl + x ; + a = Ctrl + a Using Pair-keys \u00b6 Simultaneously pressing two keys (interval less than 10ms) activates an alternate function. By default, J K are used as a pair-keys. When simultaneously pressing J and K in a text editor, it will output a pre-defined string. Setup Bluetooth \u00b6 First, we press B + 1 to start Bluetooth advertising, and then we will see the blue LED under 1 is in breathing mode\uff1a On Windows \u00b6 Open Settings / Device and then click Add Bluetooth or other device : Choose Bluetooth in the Add a device dialog, then you will see the device PYKB 1 . Click PYKB 1 to connect the keyboard. When to connect the keyboard to a second computer, just use B + 2 to start connecting. From 0 to 9 , the keyboard can connect to 10 bluetooth devices. Go further \u00b6 We hope M60 brings you an idea to make a keyboard more productive. You may have your own thoughts of configuring a keyboard. Follow the configuring guide to find what works best for you.","title":"Getting started"},{"location":"getting-started/#get-started-with-m60-keyboard","text":"M60 is a compact keyboard. It has a keymap composed of multiple layers, which is similar to TMK Keyboard . By default, No.0 layer is used:","title":"Get started with M60 Keyboard"},{"location":"getting-started/#keymap","text":"As the 60% keyboard lacks a lot of keys such as F1~F12 and arrow keys, Fn is used to activate a new layer. When holding Fn down, the following keys are activated. Fn + M triggers No.0 macro Fn + P suspends the keyboard when only powered by battery. Fn + B enters its bootloader (only for upgrade) Except Fn , a normal key can be used as a Tap-key, which is holding a key down to activate an alternate function.","title":"Keymap"},{"location":"getting-started/#using-b-to-configure-bluetooth-and-usb","text":"B is used as a Tap-key to configure Bluetooth and USB. Taping B outputs b (press & release quickly). Holding B down activates another new layer. With the layer, the following functions are available: B + Esc toggles Bluetooth B + 0 ~ 9 changes Bluetooth ID to switch between multiple computers and phones B + U toggles USB","title":"Using B to configure Bluetooth and USB"},{"location":"getting-started/#using-d-for-navigation","text":"D is also used as a Tap key for navigation functions. D + H \u2192 \u2190 D + J \u2192 \u2193 D + K \u2192 \u2191 D + L \u2192 \u2192 D + U \u2192 PgUp D + N \u2192 PgDn","title":"Using D for Navigation"},{"location":"getting-started/#using-as-ctrl","text":"; is another type of Tap-key. Taping ; outputs ; . However, holding ; down outputs Ctrl instead of activating a layer. ; + c = Ctrl + c ; + v = Ctrl + v ; + x = Ctrl + x ; + a = Ctrl + a","title":"Using ; as Ctrl"},{"location":"getting-started/#using-pair-keys","text":"Simultaneously pressing two keys (interval less than 10ms) activates an alternate function. By default, J K are used as a pair-keys. When simultaneously pressing J and K in a text editor, it will output a pre-defined string.","title":"Using Pair-keys"},{"location":"getting-started/#setup-bluetooth","text":"First, we press B + 1 to start Bluetooth advertising, and then we will see the blue LED under 1 is in breathing mode\uff1a","title":"Setup Bluetooth"},{"location":"getting-started/#on-windows","text":"Open Settings / Device and then click Add Bluetooth or other device : Choose Bluetooth in the Add a device dialog, then you will see the device PYKB 1 . Click PYKB 1 to connect the keyboard. When to connect the keyboard to a second computer, just use B + 2 to start connecting. From 0 to 9 , the keyboard can connect to 10 bluetooth devices.","title":"On Windows"},{"location":"getting-started/#go-further","text":"We hope M60 brings you an idea to make a keyboard more productive. You may have your own thoughts of configuring a keyboard. Follow the configuring guide to find what works best for you.","title":"Go further"},{"location":"keycodes/","text":"Name Description NO Do nothing TRANSPARENT Use the key of next active layer Bluetooth \u00b6 Name Description BT0 ~ BT9 Switch to Bluetooth ID n (0 - 9) BT_TOGGLE Toggle Bluetooth USB \u00b6 Name Description USB_TOGGLE Toggle USB Note When connecting the keyboard to a computer via USB, USB will be enabled automatically. When both USB and Bluetooth are enabled, USB will be used. System \u00b6 Name Description BOOTLOADER Enter the bootloader of the keyboard HEATMAP Generate heatmap (todo) SUSPEND Suspend. To wake up keyboard, just press any key SHUTDOWN Shutdown. Use ON/OFF button to power on the keyboard Layer & Modifier \u00b6 MODS_KEY(mods, key) sends one or more modifier(s) + a normal key. MODS() is used to wrap modifiers. MODS_KEY(MODS(LCTRL), C) , MODS_KEY(MODS(LCTRL, LSHIFT), C) , MODS_KEY(MODS(LCTRL, LSHIFT, LALT), C) LAYER_TOGGLE(n) toggles layer n MACRO(n) creates macro n TAP-Key \u00b6 TAP-Key has 2 modes - tap (press and release quickly) and hold (long press) LAYER_TAP(n, key) tap - outputs key , hold - turns on layer n momentary LAYER_TAP_TOGGLE(n) tap - toggles layer n, hold - turns on layer n momentary LAYER_MODS(n, mods) tap - outputs specified modifier(s), hold - turns on layer n momentary LAYER_MODS(1, MODS(LCTRL)) , LAYER_MODS(1, MODS(LCTRL, LSHIFT)) MODS_TAP(mods, key) tap - outputs key , hold - outputs specified modifier(s) MODS_TAP(MODS(LCTRL), ';') , MODS_TAP(MODS(LCTRL, LALT), LEFT) APP & Media \u00b6 AUDIO_MUTE AUDIO_VOL_UP AUDIO_VOL_DOWN TRANSPORT_NEXT_TRACK TRANSPORT_PREV_TRACK TRANSPORT_STOP TRANSPORT_STOP_EJECT TRANSPORT_PLAY_PAUSE # application launch APPLAUNCH_CC_CONFIG APPLAUNCH_EMAIL APPLAUNCH_CALCULATOR APPLAUNCH_LOCAL_BROWSER # application control APPCONTROL_SEARCH APPCONTROL_HOME APPCONTROL_BACK APPCONTROL_FORWARD APPCONTROL_STOP APPCONTROL_REFRESH APPCONTROL_BOOKMARKS # supplement for Bluegiga iWRAP HID(not supported by Windows?) APPLAUNCH_LOCK TRANSPORT_RECORD TRANSPORT_FAST_FORWARD TRANSPORT_REWIND TRANSPORT_EJECT APPCONTROL_MINIMIZE # https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/display-brightness-control DISPLAY_BRIGHTNESS_UP DISPLAY_BRIGHTNESS_DOWN Nomal keys \u00b6 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 ENTER ESCAPE ESC BACKSPACE TAB SPACE MINUS EQUAL LEFTBRACE RIGHTBRACE BACKSLASH HASHTILDE SEMICOLON APOSTROPHE QUOTE GRAVE COMMA DOT SLASH CAPSLOCK CAPS F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 PRINTSCREEN PRTSCN SCROLLLOCK PAUSE INSERT HOME PAGEUP PGUP DELETE DEL END PAGEDOWN PGDN RIGHT LEFT DOWN UP NUMLOCK KPSLASH KPASTERISK KPMINUS KPPLUS KPENTER KP1 KP2 KP3 KP4 KP5 KP6 KP7 KP8 KP9 KP0 KPDOT # 102ND APPLICATION MENU POWER KPEQUAL F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24 OPEN HELP # PROPS SELECT STOP AGAIN UNDO CUT COPY PASTE FIND MUTE KPCOMMA INT1 INT2 INT3 INT4 INT5 INT6 INT7 INT8 INT9 RO KATAKANAHIRAGANA YEN HENKAN MUHENKAN KPJPCOMMA LANG1 LANG2 LANG3 LANG4 LANG5 LANG6 LANG7 LANG8 LANG9 HANGEUL HANJA KATAKANA HIRAGANA ZENKAKUHANKAKU KPLEFTPAREN KPRIGHTPAREN LEFT_CTRL LEFT_SHIFT LEFT_ALT LEFT_GUI RIGHT_CTRL RIGHT_SHIFT RIGHT_ALT RIGHT_GUI LCTRL LSHIFT LALT LGUI RCTRL RSHIFT RALT RGUI CTRL SHIFT ALT GUI","title":"Keycodes"},{"location":"keycodes/#bluetooth","text":"Name Description BT0 ~ BT9 Switch to Bluetooth ID n (0 - 9) BT_TOGGLE Toggle Bluetooth","title":"Bluetooth"},{"location":"keycodes/#usb","text":"Name Description USB_TOGGLE Toggle USB Note When connecting the keyboard to a computer via USB, USB will be enabled automatically. When both USB and Bluetooth are enabled, USB will be used.","title":"USB"},{"location":"keycodes/#system","text":"Name Description BOOTLOADER Enter the bootloader of the keyboard HEATMAP Generate heatmap (todo) SUSPEND Suspend. To wake up keyboard, just press any key SHUTDOWN Shutdown. Use ON/OFF button to power on the keyboard","title":"System"},{"location":"keycodes/#layer-modifier","text":"MODS_KEY(mods, key) sends one or more modifier(s) + a normal key. MODS() is used to wrap modifiers. MODS_KEY(MODS(LCTRL), C) , MODS_KEY(MODS(LCTRL, LSHIFT), C) , MODS_KEY(MODS(LCTRL, LSHIFT, LALT), C) LAYER_TOGGLE(n) toggles layer n MACRO(n) creates macro n","title":"Layer &amp; Modifier"},{"location":"keycodes/#tap-key","text":"TAP-Key has 2 modes - tap (press and release quickly) and hold (long press) LAYER_TAP(n, key) tap - outputs key , hold - turns on layer n momentary LAYER_TAP_TOGGLE(n) tap - toggles layer n, hold - turns on layer n momentary LAYER_MODS(n, mods) tap - outputs specified modifier(s), hold - turns on layer n momentary LAYER_MODS(1, MODS(LCTRL)) , LAYER_MODS(1, MODS(LCTRL, LSHIFT)) MODS_TAP(mods, key) tap - outputs key , hold - outputs specified modifier(s) MODS_TAP(MODS(LCTRL), ';') , MODS_TAP(MODS(LCTRL, LALT), LEFT)","title":"TAP-Key"},{"location":"keycodes/#app-media","text":"AUDIO_MUTE AUDIO_VOL_UP AUDIO_VOL_DOWN TRANSPORT_NEXT_TRACK TRANSPORT_PREV_TRACK TRANSPORT_STOP TRANSPORT_STOP_EJECT TRANSPORT_PLAY_PAUSE # application launch APPLAUNCH_CC_CONFIG APPLAUNCH_EMAIL APPLAUNCH_CALCULATOR APPLAUNCH_LOCAL_BROWSER # application control APPCONTROL_SEARCH APPCONTROL_HOME APPCONTROL_BACK APPCONTROL_FORWARD APPCONTROL_STOP APPCONTROL_REFRESH APPCONTROL_BOOKMARKS # supplement for Bluegiga iWRAP HID(not supported by Windows?) APPLAUNCH_LOCK TRANSPORT_RECORD TRANSPORT_FAST_FORWARD TRANSPORT_REWIND TRANSPORT_EJECT APPCONTROL_MINIMIZE # https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/display-brightness-control DISPLAY_BRIGHTNESS_UP DISPLAY_BRIGHTNESS_DOWN","title":"APP &amp; Media"},{"location":"keycodes/#nomal-keys","text":"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 ENTER ESCAPE ESC BACKSPACE TAB SPACE MINUS EQUAL LEFTBRACE RIGHTBRACE BACKSLASH HASHTILDE SEMICOLON APOSTROPHE QUOTE GRAVE COMMA DOT SLASH CAPSLOCK CAPS F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 PRINTSCREEN PRTSCN SCROLLLOCK PAUSE INSERT HOME PAGEUP PGUP DELETE DEL END PAGEDOWN PGDN RIGHT LEFT DOWN UP NUMLOCK KPSLASH KPASTERISK KPMINUS KPPLUS KPENTER KP1 KP2 KP3 KP4 KP5 KP6 KP7 KP8 KP9 KP0 KPDOT # 102ND APPLICATION MENU POWER KPEQUAL F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24 OPEN HELP # PROPS SELECT STOP AGAIN UNDO CUT COPY PASTE FIND MUTE KPCOMMA INT1 INT2 INT3 INT4 INT5 INT6 INT7 INT8 INT9 RO KATAKANAHIRAGANA YEN HENKAN MUHENKAN KPJPCOMMA LANG1 LANG2 LANG3 LANG4 LANG5 LANG6 LANG7 LANG8 LANG9 HANGEUL HANJA KATAKANA HIRAGANA ZENKAKUHANKAKU KPLEFTPAREN KPRIGHTPAREN LEFT_CTRL LEFT_SHIFT LEFT_ALT LEFT_GUI RIGHT_CTRL RIGHT_SHIFT RIGHT_ALT RIGHT_GUI LCTRL LSHIFT LALT LGUI RCTRL RSHIFT RALT RGUI CTRL SHIFT ALT GUI","title":"Nomal keys"},{"location":"macro/","text":"Macro \u00b6 To setup a macro, add a macro to the keymap and define its function. For example, use Fn as No.0 macro: # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , MACRO ( 0 ), RCTRL ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . run () Use a macro to launch the Calculator on Windows \u00b6 Replace the function macro_handler with the following code to launch the Calculator with a single keystroke. def macro_handler ( dev , n , is_down ): if is_down and n == 0 : dev . send ( GUI , R ) time . sleep ( 0.1 ) dev . send_text ( 'calc \\n ' ) Automatic typing \u00b6 Read a file in the USB storage and type its content automatically. def macro_handler ( dev , n , is_down ): if is_down and n == 0 : with open ( 'code.py' , 'r' ) as f : for line in f : dev . send_text ( line ) Repeated typing \u00b6 Use a macro to trigger a repeated sequence of typing until a new key is pressed. def macro_handler ( dev , n , is_down ): if n == 0 and not is_down : t = time . time () dt = 0.01 # seconds while dev . scan () < 2 : if time . time () > t : dev . send_text ( 'hello, world \\n ' ) t += dt","title":"Macro"},{"location":"macro/#macro","text":"To setup a macro, add a macro to the keymap and define its function. For example, use Fn as No.0 macro: # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , MACRO ( 0 ), RCTRL ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . run ()","title":"Macro"},{"location":"macro/#use-a-macro-to-launch-the-calculator-on-windows","text":"Replace the function macro_handler with the following code to launch the Calculator with a single keystroke. def macro_handler ( dev , n , is_down ): if is_down and n == 0 : dev . send ( GUI , R ) time . sleep ( 0.1 ) dev . send_text ( 'calc \\n ' )","title":"Use a macro to launch the Calculator on Windows"},{"location":"macro/#automatic-typing","text":"Read a file in the USB storage and type its content automatically. def macro_handler ( dev , n , is_down ): if is_down and n == 0 : with open ( 'code.py' , 'r' ) as f : for line in f : dev . send_text ( line )","title":"Automatic typing"},{"location":"macro/#repeated-typing","text":"Use a macro to trigger a repeated sequence of typing until a new key is pressed. def macro_handler ( dev , n , is_down ): if n == 0 and not is_down : t = time . time () dt = 0.01 # seconds while dev . scan () < 2 : if time . time () > t : dev . send_text ( 'hello, world \\n ' ) t += dt","title":"Repeated typing"},{"location":"pair-keys/","text":"Pair-Keys \u00b6 When two keys are pressed simultaneously (interval less than 10ms), we use it to activate a pre-defined function. It is similar to Macro. While, pair-keys doesn't have a released event. For example, we use J K and U I as pair-keys. # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , RGUI , RCTRL ), ) # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) # Indexes of Pair-keys: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . pairs_handler = pairs_handler keyboard . run ()","title":"Pair-Keys"},{"location":"pair-keys/#pair-keys","text":"When two keys are pressed simultaneously (interval less than 10ms), we use it to activate a pre-defined function. It is similar to Macro. While, pair-keys doesn't have a released event. For example, we use J K and U I as pair-keys. # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , RGUI , RCTRL ), ) # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) # Indexes of Pair-keys: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . pairs_handler = pairs_handler keyboard . run ()","title":"Pair-Keys"},{"location":"upgrade_firmware/","text":"Upgrade Firmware \u00b6 The keyboard has a built-in bootloader to upgrade its firmware. Check Current Firmware Version \u00b6 To check the information of the firmware, just open the boot_out.txt file in the USB storage of the keyboard. The file contains the version and the compiled date of the firmware: Adafruit CircuitPython 6.0.0-alpha.1-110-g121d78ec9 on 2020-08-27; Makerdiary M60 Keyboard with nRF52840 If you find a newer firmware (file with .uf2 extension) in python-keyboard / firmware , you could do an upgrade. Enter Bootloader \u00b6 There are 4 ways to run into the bootloader: When USB is connected, press Fn + b to enter the bootloader When USB is connected, hold the ON/OFF button for 3 seconds to enter the bootloader When in Python REPL mode, run: import microcontroller as mcu mcu . on_next_reset ( mcu . RunMode . BOOTLOADER ) mcu . reset () When battery is not attached, hold the ON/OFF button and power on the keyboard with USB. Upgrade \u00b6 When the bootloader is running, a USB drive named M60Keyboard will appear in your computer. Download the latest .uf2 firmware, drag-n-drop the firmware into the USB drive, then wait until a new USB drive named CIRCUITPY appears.","title":"Upgrade"},{"location":"upgrade_firmware/#upgrade-firmware","text":"The keyboard has a built-in bootloader to upgrade its firmware.","title":"Upgrade Firmware"},{"location":"upgrade_firmware/#check-current-firmware-version","text":"To check the information of the firmware, just open the boot_out.txt file in the USB storage of the keyboard. The file contains the version and the compiled date of the firmware: Adafruit CircuitPython 6.0.0-alpha.1-110-g121d78ec9 on 2020-08-27; Makerdiary M60 Keyboard with nRF52840 If you find a newer firmware (file with .uf2 extension) in python-keyboard / firmware , you could do an upgrade.","title":"Check Current Firmware Version"},{"location":"upgrade_firmware/#enter-bootloader","text":"There are 4 ways to run into the bootloader: When USB is connected, press Fn + b to enter the bootloader When USB is connected, hold the ON/OFF button for 3 seconds to enter the bootloader When in Python REPL mode, run: import microcontroller as mcu mcu . on_next_reset ( mcu . RunMode . BOOTLOADER ) mcu . reset () When battery is not attached, hold the ON/OFF button and power on the keyboard with USB.","title":"Enter Bootloader"},{"location":"upgrade_firmware/#upgrade","text":"When the bootloader is running, a USB drive named M60Keyboard will appear in your computer. Download the latest .uf2 firmware, drag-n-drop the firmware into the USB drive, then wait until a new USB drive named CIRCUITPY appears.","title":"Upgrade"}]}