{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"M60 Mechanical Keyboard \u00b6 En | \u4e2d\u6587 M60 is a hot-swappable 60% Keyboard with USB, BLE 5.0 and RGB backlight. It is highly configurable and extensible. It can run Python code saved in its USB storage, which makes it super powerful. It has very low power consumption and only needs about 160uA current when connected to a computer via Bluetooth. It is one of the lowest latency USB keyboards. Features \u00b6 Bluetooth, including BLE 5.0 multi-pairing up to 10 devices Hot-swappable key switch mounts USB Type-C connector Standard 60% layout (61 keys) 6KRO RGB backlight (pending software support) Supports Windows/macOS/Linux/iOS/Android Low power consumption All keys remappable Up to 32 layers Macros Pair-keys Tap-keys Specs \u00b6 M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm (compatible with DZ60 cases) Note The M60 PCB uses a north-facing switch orientation. If you plan to use Cherry MX or low-profile keycaps, be sure to purchase key switches that are beveled on both the north and south ends. See Issue #3 .","title":"Introduction"},{"location":"#m60-mechanical-keyboard","text":"En | \u4e2d\u6587 M60 is a hot-swappable 60% Keyboard with USB, BLE 5.0 and RGB backlight. It is highly configurable and extensible. It can run Python code saved in its USB storage, which makes it super powerful. It has very low power consumption and only needs about 160uA current when connected to a computer via Bluetooth. It is one of the lowest latency USB keyboards.","title":"M60 Mechanical Keyboard"},{"location":"#features","text":"Bluetooth, including BLE 5.0 multi-pairing up to 10 devices Hot-swappable key switch mounts USB Type-C connector Standard 60% layout (61 keys) 6KRO RGB backlight (pending software support) Supports Windows/macOS/Linux/iOS/Android Low power consumption All keys remappable Up to 32 layers Macros Pair-keys Tap-keys","title":"Features"},{"location":"#specs","text":"M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm (compatible with DZ60 cases) Note The M60 PCB uses a north-facing switch orientation. If you plan to use Cherry MX or low-profile keycaps, be sure to purchase key switches that are beveled on both the north and south ends. See Issue #3 .","title":"Specs"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Interested in contributing to python-keyboard ? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? \u00b6 For quick questions there's no need to open an issue, because you can reach us on makerdiary/community . Found a bug? \u00b6 If you find a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Requesting a tutorial \u00b6 If you don't see what you're looking for, you can request a tutorial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutorial","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Interested in contributing to python-keyboard ? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue, because you can reach us on makerdiary/community .","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you find a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#requesting-a-tutorial","text":"If you don't see what you're looking for, you can request a tutorial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutorial","title":"Requesting a tutorial"},{"location":"assembling/","text":"Assembling \u00b6 Make sure the M60 keyboard is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Warning regarding the angle of insertion: Angled insertion is allowable and is preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0, typically 20\u00b0. Secure the module using the provided mounting screw as shown in the figure below:","title":"Assembling"},{"location":"assembling/#assembling","text":"Make sure the M60 keyboard is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Warning regarding the angle of insertion: Angled insertion is allowable and is preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0, typically 20\u00b0. Secure the module using the provided mounting screw as shown in the figure below:","title":"Assembling"},{"location":"backlight/","text":"Backlight \u00b6 The keboard has 64 programmable RGB LEDs. We are still working on the backlight. Before we get it done, you are able to customize the backlight in the macro_handler . For example, we set 9 to red color when a macro key pressed, and turn into green color when the macro key is released: def macro_handler ( dev , n , is_down ): if is_down : dev . backlight . pixel ( 9 , 0xff , 0 , 0 ) else : dev . backlight . pixel ( 9 , 0 , 0xff , 0 ) dev . backlight . update () dev.backlight provides some basic fucntions to control the RGB LEDs Backlight APIs \u00b6 update() synchronizes with its buffer. pixel(i, r, g, b) sets the bufffer of the LED i set_brightness(value) sets the global brightness of all LEDs (from 0 to 255) Index of RGB LED \u00b6 You can find the index of an LED here. # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) No.61 and No.62 are under the space key. No.63 is at the back of keyboard.","title":"Backlight"},{"location":"backlight/#backlight","text":"The keboard has 64 programmable RGB LEDs. We are still working on the backlight. Before we get it done, you are able to customize the backlight in the macro_handler . For example, we set 9 to red color when a macro key pressed, and turn into green color when the macro key is released: def macro_handler ( dev , n , is_down ): if is_down : dev . backlight . pixel ( 9 , 0xff , 0 , 0 ) else : dev . backlight . pixel ( 9 , 0 , 0xff , 0 ) dev . backlight . update () dev.backlight provides some basic fucntions to control the RGB LEDs","title":"Backlight"},{"location":"backlight/#backlight-apis","text":"update() synchronizes with its buffer. pixel(i, r, g, b) sets the bufffer of the LED i set_brightness(value) sets the global brightness of all LEDs (from 0 to 255)","title":"Backlight APIs"},{"location":"backlight/#index-of-rgb-led","text":"You can find the index of an LED here. # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) No.61 and No.62 are under the space key. No.63 is at the back of keyboard.","title":"Index of RGB LED"},{"location":"configuration/","text":"Keyboard Configuration \u00b6 M60 is not just a USB HID device, but also a USB storage device. Python code can be saved and executed in the keyboard. When the keyboard powers on, it will run the Python file code.py in its USB storage. Using code.py , you can modify they keyboard's keymap, and add macros, Tap-keys and more. An up-to-date code.py is included in this repository. Example content for code.py could be: from PYKB import * keyboard = Keyboard () ___ = TRANSPARENT BOOT = BOOTLOADER L1 = LAYER_TAP ( 1 ) L2D = LAYER_TAP ( 2 , D ) L3B = LAYER_TAP ( 3 , B ) LSFT4 = LAYER_MODS ( 4 , MODS ( LSHIFT )) RSFT4 = LAYER_MODS ( 4 , MODS ( RSHIFT )) # Semicolon & Ctrl SCC = MODS_TAP ( MODS ( RCTRL ), ';' ) keyboard . keymap = ( # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 2 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGUP , ___ , ___ , ___ , AUDIO_VOL_DOWN , AUDIO_VOL_UP , AUDIO_MUTE , ___ , ___ , ___ , ___ , ___ , ___ , LEFT , DOWN , UP , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGDN , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 3 ( BT_TOGGLE , BT1 , BT2 , BT3 , BT4 , BT5 , BT6 , BT7 , BT8 , BT9 , BT0 , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , USB_TOGGLE , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 4 ( '`' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , D , ___ , ___ , ___ , ___ , ___ , ___ , ';' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , B , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . pairs_handler = pairs_handler # Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] keyboard . verbose = False keyboard . run () The keymap variable can contains multiple layers of keycodes. The macro_handler is used to handle all macros. The pairs_handler is used to handle any pair-keys. When code.py is saved, the keyboard will reload it. If code.py has a syntax error, the keyboard will stop working. But, don't worry, it will not damage the hardware. Just use another keyboard to fix the error and save the file, and then the keyboard will recover. Examples \u00b6 If you already Python, configuring the keyboard is simple. If not, here are some examples to get started. Swap the positions of Caps and LCtrl . To do this, just swap CAPS and LCTRL in layer 0 of keymap : # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LCTRL , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , CAPS , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Use Caps as a Tap-key to activate navigation functions, instead of D . To implement this, you only need to change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LAYER_TAP ( 2 , CAPS ), A , S , D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Add a new macro. For example, the below uses Fn and Enter to trigger macro number 1 (the second macro, after macro number 0). Just add MACRO(1) to layer 1 : # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , MACRO ( 1 ), ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), To define the function of the macro, please follow the macro guide Use RShift , RGUI , Fn and RCtrl as Tap-keys, so that tapping them ( i.e. , quickly pressing & releasing them) outputs arrows keys. To do this, just change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , MODS_TAP ( MODS ( RSHIFT ), UP ), LCTRL , LGUI , LALT , SPACE , RALT , MODS_TAP ( MODS ( RGUI ), LEFT ), LAYER_TAP ( 1 , DOWN ), MODS_TAP ( MODS ( RCTRL ), RIGHT ) ),","title":"Configuration"},{"location":"configuration/#keyboard-configuration","text":"M60 is not just a USB HID device, but also a USB storage device. Python code can be saved and executed in the keyboard. When the keyboard powers on, it will run the Python file code.py in its USB storage. Using code.py , you can modify they keyboard's keymap, and add macros, Tap-keys and more. An up-to-date code.py is included in this repository. Example content for code.py could be: from PYKB import * keyboard = Keyboard () ___ = TRANSPARENT BOOT = BOOTLOADER L1 = LAYER_TAP ( 1 ) L2D = LAYER_TAP ( 2 , D ) L3B = LAYER_TAP ( 3 , B ) LSFT4 = LAYER_MODS ( 4 , MODS ( LSHIFT )) RSFT4 = LAYER_MODS ( 4 , MODS ( RSHIFT )) # Semicolon & Ctrl SCC = MODS_TAP ( MODS ( RCTRL ), ';' ) keyboard . keymap = ( # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 2 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGUP , ___ , ___ , ___ , AUDIO_VOL_DOWN , AUDIO_VOL_UP , AUDIO_MUTE , ___ , ___ , ___ , ___ , ___ , ___ , LEFT , DOWN , UP , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , PGDN , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 3 ( BT_TOGGLE , BT1 , BT2 , BT3 , BT4 , BT5 , BT6 , BT7 , BT8 , BT9 , BT0 , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , USB_TOGGLE , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), # layer 4 ( '`' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , D , ___ , ___ , ___ , ___ , ___ , ___ , ';' , ___ , ___ , ___ , ___ , ___ , ___ , ___ , B , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . pairs_handler = pairs_handler # Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] keyboard . verbose = False keyboard . run () The keymap variable can contains multiple layers of keycodes. The macro_handler is used to handle all macros. The pairs_handler is used to handle any pair-keys. When code.py is saved, the keyboard will reload it. If code.py has a syntax error, the keyboard will stop working. But, don't worry, it will not damage the hardware. Just use another keyboard to fix the error and save the file, and then the keyboard will recover.","title":"Keyboard Configuration"},{"location":"configuration/#examples","text":"If you already Python, configuring the keyboard is simple. If not, here are some examples to get started. Swap the positions of Caps and LCtrl . To do this, just swap CAPS and LCTRL in layer 0 of keymap : # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LCTRL , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , CAPS , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Use Caps as a Tap-key to activate navigation functions, instead of D . To implement this, you only need to change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , LAYER_TAP ( 2 , CAPS ), A , S , D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , RSFT4 , LCTRL , LGUI , LALT , SPACE , RALT , MENU , L1 , RCTRL ), Add a new macro. For example, the below uses Fn and Enter to trigger macro number 1 (the second macro, after macro number 0). Just add MACRO(1) to layer 1 : # layer 1 ( '`' , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10 , F11 , F12 , DEL , ___ , ___ , UP , ___ , ___ , ___ , ___ , ___ , ___ , ___ , SUSPEND , ___ , ___ , ___ , ___ , LEFT , DOWN , RIGHT , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , MACRO ( 1 ), ___ , ___ , ___ , ___ , ___ , BOOT , ___ , MACRO ( 0 ), ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ , ___ ), To define the function of the macro, please follow the macro guide Use RShift , RGUI , Fn and RCtrl as Tap-keys, so that tapping them ( i.e. , quickly pressing & releasing them) outputs arrows keys. To do this, just change layer 0 to: # layer 0 ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , L2D , F , G , H , J , K , L , SCC , '\"' , ENTER , LSFT4 , Z , X , C , V , L3B , N , M , ',' , '.' , '/' , MODS_TAP ( MODS ( RSHIFT ), UP ), LCTRL , LGUI , LALT , SPACE , RALT , MODS_TAP ( MODS ( RGUI ), LEFT ), LAYER_TAP ( 1 , DOWN ), MODS_TAP ( MODS ( RCTRL ), RIGHT ) ),","title":"Examples"},{"location":"factory_reset/","text":"Factory Reset \u00b6 If you get a fatal error when you modify the code of keyboard, you can always do a factory reset: Download factory_reset.uf2 , follow the firmware upgrade guide to flash factoary_reset.uf2 . It will erase the storage of the keyboard. Flash the latest firmware from python-keyboard / firmware .","title":"Factory Reset"},{"location":"factory_reset/#factory-reset","text":"If you get a fatal error when you modify the code of keyboard, you can always do a factory reset: Download factory_reset.uf2 , follow the firmware upgrade guide to flash factoary_reset.uf2 . It will erase the storage of the keyboard. Flash the latest firmware from python-keyboard / firmware .","title":"Factory Reset"},{"location":"getting-started/","text":"Get started with M60 Keyboard \u00b6 M60 is a compact keyboard. It has a keymap composed of multiple layers, similar to TMK Keyboard . By default, layer number 0 is used, which includes a normal key map: Keymap \u00b6 As the 60% keyboard lacks a lot of keys such as F1~F12 and arrow keys, Fn is used to activate a second layer, layer number 1. By default, holding Fn down activates the following functions: Fn + M triggers No.0 macro Fn + P suspends the keyboard when only powered by battery. Fn + B enters its bootloader (only for used for firmware upgrades) Except for Fn , any normal key can be used as a Tap-key. A Tap-key is a key that can be used as an ordinary key when tapped, or can be held down to activate alternate functions. All of the default Tap-keys, including D , B , and ; can be re-configured . Using D for Navigation \u00b6 D is the default Tap-key to activate the navigation functions. Holding it activates layer number 2, which includes navigation keys: D + H \u2192 \u2190 D + J \u2192 \u2193 D + K \u2192 \u2191 D + L \u2192 \u2192 D + U \u2192 PgUp D + N \u2192 PgDn Using B to Configure Bluetooth and USB \u00b6 B is the default Tap-key to configure Bluetooth and USB. Tapping B ( i.e. , pressing & releasing it quickly) outputs b . Holding B down activates another the Bluetooth keyboard layer, layer number 3. When the Bluetooth layer is active, the following functions are available: B + Esc toggles Bluetooth B + 0 ~ 9 changes Bluetooth ID to switch between multiple computers and phones B + U toggles USB Using ; as Ctrl \u00b6 ; is a different type of Tap-key. Tapping ; outputs ; . However, holding ; down outputs Ctrl instead of activating a layer. ; + c = Ctrl + c ; + v = Ctrl + v ; + x = Ctrl + x ; + a = Ctrl + a Using Pair-keys \u00b6 Simultaneously pressing two keys ( i.e. , pressing them in an interval of less than 10ms) activates an alternate function. Two sets of pair-keys are configured by default, to illustrate how to setup these keys. These include J K and U I . As shipped, simultaneously pressing J and K or U and I in a text editor will output a pre-defined string ( e.g. , \"You just triggered pair keys #0\"). How to Setup Bluetooth \u00b6 First, press B + 1 to start Bluetooth advertising. You will then see the blue LED under 1 enter in \"breathing\" mode and flash slowly\uff1a On Windows \u00b6 Open Settings / Device and then click Add Bluetooth or other device : Choose Bluetooth in the Add a device dialog, then you will see the device PYKB 1 . Click PYKB 1 to connect the keyboard. In order to connect the keyboard to a second computer, just use B + 2 to start connecting. From 0 to 9 , the keyboard can connect to 10 bluetooth devices. Go Further \u00b6 We hope M60 keyboard incites ideas to make a keyboard more productive, all without having to install any third-party software or drivers on your computer. If you have your own thoughts on how to best configure the keyboard, just follow the configuration guide to find what works best for you.","title":"Getting started"},{"location":"getting-started/#get-started-with-m60-keyboard","text":"M60 is a compact keyboard. It has a keymap composed of multiple layers, similar to TMK Keyboard . By default, layer number 0 is used, which includes a normal key map:","title":"Get started with M60 Keyboard"},{"location":"getting-started/#keymap","text":"As the 60% keyboard lacks a lot of keys such as F1~F12 and arrow keys, Fn is used to activate a second layer, layer number 1. By default, holding Fn down activates the following functions: Fn + M triggers No.0 macro Fn + P suspends the keyboard when only powered by battery. Fn + B enters its bootloader (only for used for firmware upgrades) Except for Fn , any normal key can be used as a Tap-key. A Tap-key is a key that can be used as an ordinary key when tapped, or can be held down to activate alternate functions. All of the default Tap-keys, including D , B , and ; can be re-configured .","title":"Keymap"},{"location":"getting-started/#using-d-for-navigation","text":"D is the default Tap-key to activate the navigation functions. Holding it activates layer number 2, which includes navigation keys: D + H \u2192 \u2190 D + J \u2192 \u2193 D + K \u2192 \u2191 D + L \u2192 \u2192 D + U \u2192 PgUp D + N \u2192 PgDn","title":"Using D for Navigation"},{"location":"getting-started/#using-b-to-configure-bluetooth-and-usb","text":"B is the default Tap-key to configure Bluetooth and USB. Tapping B ( i.e. , pressing & releasing it quickly) outputs b . Holding B down activates another the Bluetooth keyboard layer, layer number 3. When the Bluetooth layer is active, the following functions are available: B + Esc toggles Bluetooth B + 0 ~ 9 changes Bluetooth ID to switch between multiple computers and phones B + U toggles USB","title":"Using B to Configure Bluetooth and USB"},{"location":"getting-started/#using-as-ctrl","text":"; is a different type of Tap-key. Tapping ; outputs ; . However, holding ; down outputs Ctrl instead of activating a layer. ; + c = Ctrl + c ; + v = Ctrl + v ; + x = Ctrl + x ; + a = Ctrl + a","title":"Using ; as Ctrl"},{"location":"getting-started/#using-pair-keys","text":"Simultaneously pressing two keys ( i.e. , pressing them in an interval of less than 10ms) activates an alternate function. Two sets of pair-keys are configured by default, to illustrate how to setup these keys. These include J K and U I . As shipped, simultaneously pressing J and K or U and I in a text editor will output a pre-defined string ( e.g. , \"You just triggered pair keys #0\").","title":"Using Pair-keys"},{"location":"getting-started/#how-to-setup-bluetooth","text":"First, press B + 1 to start Bluetooth advertising. You will then see the blue LED under 1 enter in \"breathing\" mode and flash slowly\uff1a","title":"How to Setup Bluetooth"},{"location":"getting-started/#on-windows","text":"Open Settings / Device and then click Add Bluetooth or other device : Choose Bluetooth in the Add a device dialog, then you will see the device PYKB 1 . Click PYKB 1 to connect the keyboard. In order to connect the keyboard to a second computer, just use B + 2 to start connecting. From 0 to 9 , the keyboard can connect to 10 bluetooth devices.","title":"On Windows"},{"location":"getting-started/#go-further","text":"We hope M60 keyboard incites ideas to make a keyboard more productive, all without having to install any third-party software or drivers on your computer. If you have your own thoughts on how to best configure the keyboard, just follow the configuration guide to find what works best for you.","title":"Go Further"},{"location":"keycodes/","text":"Name Description NO Do nothing TRANSPARENT Use the key of next active layer Bluetooth \u00b6 Name Description BT0 ~ BT9 Switch to Bluetooth ID n (0 - 9) BT_TOGGLE Toggle Bluetooth USB \u00b6 Name Description USB_TOGGLE Toggle USB Note: When connecting the keyboard to a computer via USB, USB will be enabled automatically. When both USB and Bluetooth are enabled, USB will be used. System \u00b6 Name Description BOOTLOADER Enter the bootloader of the keyboard HEATMAP Generate heatmap (todo) SUSPEND Suspend. To wake up keyboard, just press any key SHUTDOWN Shutdown. Use ON/OFF button to power on the keyboard Layer & Modifier \u00b6 MODS_KEY(mods, key) sends one or more modifier(s) + a normal key. MODS() is used to wrap modifiers. MODS_KEY(MODS(LCTRL), C) , MODS_KEY(MODS(LCTRL, LSHIFT), C) , MODS_KEY(MODS(LCTRL, LSHIFT, LALT), C) LAYER_TOGGLE(n) toggles layer n MACRO(n) creates macro n TAP-Key \u00b6 A TAP-Key has 2 modes - tap (press and release quickly) and hold (long press) LAYER_TAP(n, key) tap - outputs key , hold - turns on layer n momentary LAYER_TAP_TOGGLE(n) tap - toggles layer n, hold - turns on layer n momentary LAYER_MODS(n, mods) tap - outputs specified modifier(s), hold - turns on layer n momentary LAYER_MODS(1, MODS(LCTRL)) , LAYER_MODS(1, MODS(LCTRL, LSHIFT)) MODS_TAP(mods, key) tap - outputs key , hold - outputs specified modifier(s) MODS_TAP(MODS(LCTRL), ';') , MODS_TAP(MODS(LCTRL, LALT), LEFT) APP & Media \u00b6 AUDIO_MUTE AUDIO_VOL_UP AUDIO_VOL_DOWN TRANSPORT_NEXT_TRACK TRANSPORT_PREV_TRACK TRANSPORT_STOP TRANSPORT_STOP_EJECT TRANSPORT_PLAY_PAUSE # application launch APPLAUNCH_CC_CONFIG APPLAUNCH_EMAIL APPLAUNCH_CALCULATOR APPLAUNCH_LOCAL_BROWSER # application control APPCONTROL_SEARCH APPCONTROL_HOME APPCONTROL_BACK APPCONTROL_FORWARD APPCONTROL_STOP APPCONTROL_REFRESH APPCONTROL_BOOKMARKS # supplement for Bluegiga iWRAP HID(not supported by Windows?) APPLAUNCH_LOCK TRANSPORT_RECORD TRANSPORT_FAST_FORWARD TRANSPORT_REWIND TRANSPORT_EJECT APPCONTROL_MINIMIZE # https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/display-brightness-control DISPLAY_BRIGHTNESS_UP DISPLAY_BRIGHTNESS_DOWN Nomal keys \u00b6 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 ENTER ESCAPE ESC BACKSPACE TAB SPACE MINUS EQUAL LEFTBRACE RIGHTBRACE BACKSLASH HASHTILDE SEMICOLON APOSTROPHE QUOTE GRAVE COMMA DOT SLASH CAPSLOCK CAPS F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 PRINTSCREEN PRTSCN SCROLLLOCK PAUSE INSERT HOME PAGEUP PGUP DELETE DEL END PAGEDOWN PGDN RIGHT LEFT DOWN UP NUMLOCK KPSLASH KPASTERISK KPMINUS KPPLUS KPENTER KP1 KP2 KP3 KP4 KP5 KP6 KP7 KP8 KP9 KP0 KPDOT # 102ND APPLICATION MENU POWER KPEQUAL F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24 OPEN HELP # PROPS SELECT STOP AGAIN UNDO CUT COPY PASTE FIND MUTE KPCOMMA INT1 INT2 INT3 INT4 INT5 INT6 INT7 INT8 INT9 RO KATAKANAHIRAGANA YEN HENKAN MUHENKAN KPJPCOMMA LANG1 LANG2 LANG3 LANG4 LANG5 LANG6 LANG7 LANG8 LANG9 HANGEUL HANJA KATAKANA HIRAGANA ZENKAKUHANKAKU KPLEFTPAREN KPRIGHTPAREN LEFT_CTRL LEFT_SHIFT LEFT_ALT LEFT_GUI RIGHT_CTRL RIGHT_SHIFT RIGHT_ALT RIGHT_GUI LCTRL LSHIFT LALT LGUI RCTRL RSHIFT RALT RGUI CTRL SHIFT ALT GUI","title":"Keycodes"},{"location":"keycodes/#bluetooth","text":"Name Description BT0 ~ BT9 Switch to Bluetooth ID n (0 - 9) BT_TOGGLE Toggle Bluetooth","title":"Bluetooth"},{"location":"keycodes/#usb","text":"Name Description USB_TOGGLE Toggle USB Note: When connecting the keyboard to a computer via USB, USB will be enabled automatically. When both USB and Bluetooth are enabled, USB will be used.","title":"USB"},{"location":"keycodes/#system","text":"Name Description BOOTLOADER Enter the bootloader of the keyboard HEATMAP Generate heatmap (todo) SUSPEND Suspend. To wake up keyboard, just press any key SHUTDOWN Shutdown. Use ON/OFF button to power on the keyboard","title":"System"},{"location":"keycodes/#layer-modifier","text":"MODS_KEY(mods, key) sends one or more modifier(s) + a normal key. MODS() is used to wrap modifiers. MODS_KEY(MODS(LCTRL), C) , MODS_KEY(MODS(LCTRL, LSHIFT), C) , MODS_KEY(MODS(LCTRL, LSHIFT, LALT), C) LAYER_TOGGLE(n) toggles layer n MACRO(n) creates macro n","title":"Layer &amp; Modifier"},{"location":"keycodes/#tap-key","text":"A TAP-Key has 2 modes - tap (press and release quickly) and hold (long press) LAYER_TAP(n, key) tap - outputs key , hold - turns on layer n momentary LAYER_TAP_TOGGLE(n) tap - toggles layer n, hold - turns on layer n momentary LAYER_MODS(n, mods) tap - outputs specified modifier(s), hold - turns on layer n momentary LAYER_MODS(1, MODS(LCTRL)) , LAYER_MODS(1, MODS(LCTRL, LSHIFT)) MODS_TAP(mods, key) tap - outputs key , hold - outputs specified modifier(s) MODS_TAP(MODS(LCTRL), ';') , MODS_TAP(MODS(LCTRL, LALT), LEFT)","title":"TAP-Key"},{"location":"keycodes/#app-media","text":"AUDIO_MUTE AUDIO_VOL_UP AUDIO_VOL_DOWN TRANSPORT_NEXT_TRACK TRANSPORT_PREV_TRACK TRANSPORT_STOP TRANSPORT_STOP_EJECT TRANSPORT_PLAY_PAUSE # application launch APPLAUNCH_CC_CONFIG APPLAUNCH_EMAIL APPLAUNCH_CALCULATOR APPLAUNCH_LOCAL_BROWSER # application control APPCONTROL_SEARCH APPCONTROL_HOME APPCONTROL_BACK APPCONTROL_FORWARD APPCONTROL_STOP APPCONTROL_REFRESH APPCONTROL_BOOKMARKS # supplement for Bluegiga iWRAP HID(not supported by Windows?) APPLAUNCH_LOCK TRANSPORT_RECORD TRANSPORT_FAST_FORWARD TRANSPORT_REWIND TRANSPORT_EJECT APPCONTROL_MINIMIZE # https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/display-brightness-control DISPLAY_BRIGHTNESS_UP DISPLAY_BRIGHTNESS_DOWN","title":"APP &amp; Media"},{"location":"keycodes/#nomal-keys","text":"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 ENTER ESCAPE ESC BACKSPACE TAB SPACE MINUS EQUAL LEFTBRACE RIGHTBRACE BACKSLASH HASHTILDE SEMICOLON APOSTROPHE QUOTE GRAVE COMMA DOT SLASH CAPSLOCK CAPS F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 PRINTSCREEN PRTSCN SCROLLLOCK PAUSE INSERT HOME PAGEUP PGUP DELETE DEL END PAGEDOWN PGDN RIGHT LEFT DOWN UP NUMLOCK KPSLASH KPASTERISK KPMINUS KPPLUS KPENTER KP1 KP2 KP3 KP4 KP5 KP6 KP7 KP8 KP9 KP0 KPDOT # 102ND APPLICATION MENU POWER KPEQUAL F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24 OPEN HELP # PROPS SELECT STOP AGAIN UNDO CUT COPY PASTE FIND MUTE KPCOMMA INT1 INT2 INT3 INT4 INT5 INT6 INT7 INT8 INT9 RO KATAKANAHIRAGANA YEN HENKAN MUHENKAN KPJPCOMMA LANG1 LANG2 LANG3 LANG4 LANG5 LANG6 LANG7 LANG8 LANG9 HANGEUL HANJA KATAKANA HIRAGANA ZENKAKUHANKAKU KPLEFTPAREN KPRIGHTPAREN LEFT_CTRL LEFT_SHIFT LEFT_ALT LEFT_GUI RIGHT_CTRL RIGHT_SHIFT RIGHT_ALT RIGHT_GUI LCTRL LSHIFT LALT LGUI RCTRL RSHIFT RALT RGUI CTRL SHIFT ALT GUI","title":"Nomal keys"},{"location":"macro/","text":"Macro \u00b6 To set up a macro, add a macro to the keymap and define its function. By default, Fn is configured as macro number 0: # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , MACRO ( 0 ), RCTRL ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . run () Examples \u00b6 Use a macro to launch the Calculator application on Windows \u00b6 Replace the function macro_handler with the following code to launch the Calculator with a single keystroke: def macro_handler ( dev , n , is_down ): if is_down and n == 0 : dev . send ( GUI , R ) time . sleep ( 0.1 ) dev . send_text ( 'calc \\n ' ) Automatic typing \u00b6 Use the following code to read a file in the keyboard's USB storage and type its content automatically: def macro_handler ( dev , n , is_down ): if is_down and n == 0 : with open ( 'code.py' , 'r' ) as f : for line in f : dev . send_text ( line ) Repeated key strokes \u00b6 Use a macro to trigger a repeated sequence of key presses until a new key is pressed: def macro_handler ( dev , n , is_down ): if n == 0 and not is_down : t = time . time () dt = 0.01 # seconds while dev . scan () < 2 : if time . time () > t : dev . send_text ( 'hello, world \\n ' ) t += dt","title":"Macro"},{"location":"macro/#macro","text":"To set up a macro, add a macro to the keymap and define its function. By default, Fn is configured as macro number 0: # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , MACRO ( 0 ), RCTRL ), ) def macro_handler ( dev , n , is_down ): if is_down : dev . send_text ( 'You pressed macro # {} \\n ' . format ( n )) else : dev . send_text ( 'You released macro # {} \\n ' . format ( n )) keyboard . macro_handler = macro_handler keyboard . run ()","title":"Macro"},{"location":"macro/#examples","text":"","title":"Examples"},{"location":"macro/#use-a-macro-to-launch-the-calculator-application-on-windows","text":"Replace the function macro_handler with the following code to launch the Calculator with a single keystroke: def macro_handler ( dev , n , is_down ): if is_down and n == 0 : dev . send ( GUI , R ) time . sleep ( 0.1 ) dev . send_text ( 'calc \\n ' )","title":"Use a macro to launch the Calculator application on Windows"},{"location":"macro/#automatic-typing","text":"Use the following code to read a file in the keyboard's USB storage and type its content automatically: def macro_handler ( dev , n , is_down ): if is_down and n == 0 : with open ( 'code.py' , 'r' ) as f : for line in f : dev . send_text ( line )","title":"Automatic typing"},{"location":"macro/#repeated-key-strokes","text":"Use a macro to trigger a repeated sequence of key presses until a new key is pressed: def macro_handler ( dev , n , is_down ): if n == 0 and not is_down : t = time . time () dt = 0.01 # seconds while dev . scan () < 2 : if time . time () > t : dev . send_text ( 'hello, world \\n ' ) t += dt","title":"Repeated key strokes"},{"location":"pair-keys/","text":"Pair-Keys \u00b6 They keyboard can be configured to activate a pre-defined function when two keys are pressed simultaneously ( i.e. , within an interval less than 10ms). Like a macro, activating pair-keys triggers an immediate event. Unlike a macro, pair-keys do not have a release (key-up) event. By default, the keyboard uses J K and U I as pair-keys to trigger example functions ( e.g. , typing \"You just triggered pair keys #0\"). # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , RGUI , RCTRL ), ) # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) # Indexes of Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . pairs_handler = pairs_handler keyboard . run ()","title":"Pair-Keys"},{"location":"pair-keys/#pair-keys","text":"They keyboard can be configured to activate a pre-defined function when two keys are pressed simultaneously ( i.e. , within an interval less than 10ms). Like a macro, activating pair-keys triggers an immediate event. Unlike a macro, pair-keys do not have a release (key-up) event. By default, the keyboard uses J K and U I as pair-keys to trigger example functions ( e.g. , typing \"You just triggered pair keys #0\"). # code.py from keyboard import * keyboard = Keyboard () keyboard . keymap = ( ( ESC , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 , '-' , '=' , BACKSPACE , TAB , Q , W , E , R , T , Y , U , I , O , P , '[' , ']' , '|' , CAPS , A , S , D , F , G , H , J , K , L , ';' , '\"' , ENTER , LSHIFT , Z , X , C , V , B , N , M , ',' , '.' , '/' , RSHIFT , LCTRL , LGUI , LALT , SPACE , RALT , MENU , RGUI , RCTRL ), ) # ESC(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(10) -(11) =(12) BACKSPACE(13) # TAB(27) Q(26) W(25) E(24) R(23) T(22) Y(21) U(20) I(19) O(18) P(17) [(16) ](15) \\(14) # CAPS(28) A(29) S(30) D(31) F(32) G(33) H(34) J(35) K(36) L(37) ;(38) \"(39) ENTER(40) #LSHIFT(52) Z(51) X(50) C(49) V(48) B(47) N(46) M(45) ,(44) .(43) /(42) RSHIFT(41) # LCTRL(53) LGUI(54) LALT(55) SPACE(56) RALT(57) MENU(58) Fn(59) RCTRL(60) # Indexes of Pairs: J & K, U & I keyboard . pairs = [{ 35 , 36 }, { 20 , 19 }] def pairs_handler ( dev , n ): dev . send_text ( 'You just triggered pair keys # {} \\n ' . format ( n )) keyboard . pairs_handler = pairs_handler keyboard . run ()","title":"Pair-Keys"},{"location":"upgrade_firmware/","text":"Upgrade Firmware \u00b6 The keyboard has a built-in bootloader to upgrade its firmware. How to Check Current Firmware Version \u00b6 To check the current version of the firmware, just open boot_out.txt in the USB storage device of the keyboard. This file contains the version number and the compiled date of the firmware, for example: Adafruit CircuitPython 6.0.0-alpha.1-110-g121d78ec9 on 2020-08-27; Makerdiary M60 Keyboard with nRF52840 If you there is a newer firmware revision (file with .uf2 extension) in python-keyboard / firmware , you upgrade to the newest version by following the instructions below. How to Enter the Bootloader \u00b6 There are 4 ways to run into the bootloader: When USB is connected, press Fn + b to enter the bootloader When USB is connected, hold the ON/OFF button for 3 seconds to enter the bootloader When in Python REPL mode, run: import microcontroller as mcu mcu . on_next_reset ( mcu . RunMode . BOOTLOADER ) mcu . reset () When a battery is not attached, hold the ON/OFF button and power on the keyboard with USB. How to Upgrade \u00b6 When the bootloader is running, a USB drive named M60Keyboard will appear in your computer. Download the latest .uf2 firmware, drag-n-drop the firmware into the USB drive, and then wait until a new USB drive named CIRCUITPY appears.","title":"Upgrade"},{"location":"upgrade_firmware/#upgrade-firmware","text":"The keyboard has a built-in bootloader to upgrade its firmware.","title":"Upgrade Firmware"},{"location":"upgrade_firmware/#how-to-check-current-firmware-version","text":"To check the current version of the firmware, just open boot_out.txt in the USB storage device of the keyboard. This file contains the version number and the compiled date of the firmware, for example: Adafruit CircuitPython 6.0.0-alpha.1-110-g121d78ec9 on 2020-08-27; Makerdiary M60 Keyboard with nRF52840 If you there is a newer firmware revision (file with .uf2 extension) in python-keyboard / firmware , you upgrade to the newest version by following the instructions below.","title":"How to Check Current Firmware Version"},{"location":"upgrade_firmware/#how-to-enter-the-bootloader","text":"There are 4 ways to run into the bootloader: When USB is connected, press Fn + b to enter the bootloader When USB is connected, hold the ON/OFF button for 3 seconds to enter the bootloader When in Python REPL mode, run: import microcontroller as mcu mcu . on_next_reset ( mcu . RunMode . BOOTLOADER ) mcu . reset () When a battery is not attached, hold the ON/OFF button and power on the keyboard with USB.","title":"How to Enter the Bootloader"},{"location":"upgrade_firmware/#how-to-upgrade","text":"When the bootloader is running, a USB drive named M60Keyboard will appear in your computer. Download the latest .uf2 firmware, drag-n-drop the firmware into the USB drive, and then wait until a new USB drive named CIRCUITPY appears.","title":"How to Upgrade"},{"location":"where_to_buy/","text":"Where to Buy M60 Keyboard \u00b6 Buy Online \u00b6 M60 keyboard is available on the following channels (click to go directly to the product): Bulk & Customization \u00b6 We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Where to Buy"},{"location":"where_to_buy/#where-to-buy-m60-keyboard","text":"","title":"Where to Buy M60 Keyboard"},{"location":"where_to_buy/#buy-online","text":"M60 keyboard is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"where_to_buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Bulk &amp; Customization"},{"location":"developer_guide/","text":"Dive Into Keyboard \u00b6 Normally, you only need to change code.py to configure the keyboard. If you are very good at Python and have a new idea which can not be implemented in code.py , you can modify the keyboard library . Note When you modify the keyboard library, the keyboard may stop working if there is any syntax error or other error in the code. You will need another keyboard to fix it. If you get a fatal error, you can always do a factory reset . By default, The CircuitPython firmware of M60 has two frozen modules - adafruit_ble and PYKB . PYKB is a frozen version of the keyboard library. Use latest keyboard library \u00b6 Copy keyboard folder of python-keyboard to the lib directory of the CIRCUITPY USB drive. Replace from PYKB import * to from keyboard import * in code.py of the USB drive. Develop with C/C++, Rust, JerryScript, TinyGo \u00b6 The M60 keybaord also supports C/C++, Rust, JerryScript and TinyGo. To create your own firmware, read the hardware information to get started.","title":"Dive Into Keyboard"},{"location":"developer_guide/#dive-into-keyboard","text":"Normally, you only need to change code.py to configure the keyboard. If you are very good at Python and have a new idea which can not be implemented in code.py , you can modify the keyboard library . Note When you modify the keyboard library, the keyboard may stop working if there is any syntax error or other error in the code. You will need another keyboard to fix it. If you get a fatal error, you can always do a factory reset . By default, The CircuitPython firmware of M60 has two frozen modules - adafruit_ble and PYKB . PYKB is a frozen version of the keyboard library.","title":"Dive Into Keyboard"},{"location":"developer_guide/#use-latest-keyboard-library","text":"Copy keyboard folder of python-keyboard to the lib directory of the CIRCUITPY USB drive. Replace from PYKB import * to from keyboard import * in code.py of the USB drive.","title":"Use latest keyboard library"},{"location":"developer_guide/#develop-with-cc-rust-jerryscript-tinygo","text":"The M60 keybaord also supports C/C++, Rust, JerryScript and TinyGo. To create your own firmware, read the hardware information to get started.","title":"Develop with C/C++, Rust, JerryScript, TinyGo"},{"location":"developer_guide/hardware/","text":"Hardware \u00b6 Specs \u00b6 M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm Keyboard Matrix \u00b6 The pins of 8x8 keyboard matrix: 1 2 3 4 5 6 7 8 ROW P0_05 P0_06 P0_07 P0_08 P1_09 P1_08 P0_12 P0_11 COL P0_19 P0_20 P0_21 P0_22 P0_23 P0_24 P0_25 P0_26 Power \u00b6 When powered by USB, the keyboard is always on. When powered by a battery, the keyboard is on if the ON/OFF button is pressed or pin P0_28 outputs 0 . Button \u00b6 The ON/OFF Button is at the back of the keyboard. It is connected to P0_27 . LEDs on M.2 \u00b6 LEDs Pin Red LED P0_30 Green LED P0_29 Blue LED P0_31 RGB LEDs Matrix \u00b6 The RGB LEDs Matrix has 64 RGB LEDs and is driven by IS32FL3733. name Pin note Power P1_04 1: on, 0: off I2C SDA P1_05 I2C SCL P1_06 Interrupt P1_07 Battery \u00b6 name Pin note Charging P0_03 0: charging Voltage P0_02 AIN0","title":"Hardware"},{"location":"developer_guide/hardware/#hardware","text":"","title":"Hardware"},{"location":"developer_guide/hardware/#specs","text":"M60 Keyboard Core Module nRF52840, Arm Cortex-M4F, 64MHz, 256KB RAM, 1MB FLASH, 8MB QSPI Flash, M.2 KEY-E Wireless Bluetooth Low Energy 5.0, NFC USB Type-C Layout 60% (61 Keys) Hot-Swappable Yes Switch Option Cherry MX compatible Switches Backlight 64 RGB LEDs, IS32FL3733 Battery Connector JST 1.25mm 3-Pin RF Antennas 2.4GHz Cabled PCB Antenna, NFC Cabled PCB Antenna Dimensions 285 mm x 94.6 mm","title":"Specs"},{"location":"developer_guide/hardware/#keyboard-matrix","text":"The pins of 8x8 keyboard matrix: 1 2 3 4 5 6 7 8 ROW P0_05 P0_06 P0_07 P0_08 P1_09 P1_08 P0_12 P0_11 COL P0_19 P0_20 P0_21 P0_22 P0_23 P0_24 P0_25 P0_26","title":"Keyboard Matrix"},{"location":"developer_guide/hardware/#power","text":"When powered by USB, the keyboard is always on. When powered by a battery, the keyboard is on if the ON/OFF button is pressed or pin P0_28 outputs 0 .","title":"Power"},{"location":"developer_guide/hardware/#button","text":"The ON/OFF Button is at the back of the keyboard. It is connected to P0_27 .","title":"Button"},{"location":"developer_guide/hardware/#leds-on-m2","text":"LEDs Pin Red LED P0_30 Green LED P0_29 Blue LED P0_31","title":"LEDs on M.2"},{"location":"developer_guide/hardware/#rgb-leds-matrix","text":"The RGB LEDs Matrix has 64 RGB LEDs and is driven by IS32FL3733. name Pin note Power P1_04 1: on, 0: off I2C SDA P1_05 I2C SCL P1_06 Interrupt P1_07","title":"RGB LEDs Matrix"},{"location":"developer_guide/hardware/#battery","text":"name Pin note Charging P0_03 0: charging Voltage P0_02 AIN0","title":"Battery"}]}